
from api.twttr_api import TwttrAPIClient
from api.utools_api import uToolsAPIClient
from logic.classes import Account
from logic.exceptions import Error, AccountBanned

from .basic import add_message, send_telegram_message
from .data import (check_if_messages_in_conversation_from_response,
                   get_dm_init_data_from_response,
                   get_dm_list_data_from_response, get_maximal_entry_id,
                   get_model_info_from_response,
                   get_reposted_timeline_data_from_response,
                   get_sorted_conversations, get_sorted_messages,
                   get_tweet_data_from_response)
from .database import add_or_update_user


async def check_automated(e: Error, account: Account, worker_name:str=None):
    if "This request looks like it might be automated" in str(e):
        account.soft_detected = True
        add_message("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –±—ã–ª–∞ –∑–∞–º–µ—á–µ–Ω–∞.\nüïî –û–∂–∏–¥–∞–Ω–∏–µ", account.screen_name, type="warning")
        send_telegram_message(f"‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –±—ã–ª–∞ –∑–∞–º–µ—á–µ–Ω–∞.\nüïî –û–∂–∏–¥–∞–Ω–∏–µ {account.settings.if_detected_cooldown_seconds}—Å.", account.screen_name)


async def check_banned(e: Error, account: Account, worker_name:str=None):
    if "spam" in str(e) or "retricted" in str(e):
       # await add_message("üö® –ê–ö–ö–ê–£–ù–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù! üö®", account.screen_name, account.color, "error")
        send_telegram_message(f"üö® –ê–ö–ö–ê–£–ù–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù! üö®", account.screen_name)
        raise AccountBanned("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


async def send_dm(twttr_client: TwttrAPIClient, account: Account, message:str, user_id:int="", username:str="", media_id:int=""):
    try:
        r = await twttr_client.send_dm(message, to_user_id=user_id, to_user_name=username, media_id=media_id)
        add_message(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", account.screen_name, account.color, "success")
        await add_or_update_user(account, user_id)
        return True
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", account.screen_name, account.color, "error")
        await check_automated(e, account)
        await check_banned(e, account)
        return False


async def get_model_info(twttr_client: TwttrAPIClient, account: Account, worker_name:str=None):
    add_message(f"–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –º–æ–¥–µ–ª–∏...", account.screen_name, account.color, "log", worker_name)
    try:
        r = await twttr_client.get_user(account.screen_name)
        status, id, name, screen_name, followers_count, pinned_tweet_id = await get_model_info_from_response(r)
        if not status:
            add_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏", account.screen_name, account.color, "error", worker_name)
            return False, None, None, None, None, None
        add_message("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞!", account.screen_name, account.color, "success", worker_name)
        return True, id, name, screen_name, followers_count, pinned_tweet_id
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}", account.screen_name, account.color, "error", worker_name)
        await check_automated(e, account)
        await check_banned(e, account)
        return False, None, None, None, None, None


async def get_id_by_auth_token(utools_client: uToolsAPIClient, account: Account, worker_name:str=None):
    while True:
        try:
            add_message(f"–ü–æ–ª—É—á–∞—é ID –º–æ–¥–µ–ª–∏...", account.screen_name, account.color, "log", worker_name)
            r = await utools_client.get_user_id_by_auth_token()
            return int(r.get("data")) if r.get("data") else False
        except Exception as e:
            add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ auth_token: {e}", account.screen_name, account.color, "error", worker_name)
            await check_automated(e, account)
            await check_banned(e, account)
            return False
    

async def get_ct0_by_auth_token(utools_client: uToolsAPIClient, account: Account, worker_name:str=None):
    try:
        add_message(f"–ü–æ–ª—É—á–∞—é ct0...", account.screen_name, account.color, "log", worker_name)
        r = await utools_client.get_ct0_by_auth_token()
        return r.get("data")
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ct0: {e}", account.screen_name, account.color, "error", worker_name)
        await check_automated(e, account)
        await check_banned(e, account)
        return False


async def init_dm(utools_client:uToolsAPIClient, twttr_client:TwttrAPIClient, account: Account, worker_name:str=None):
    try:
        add_message(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DM...", account.screen_name, account.color, "log", worker_name)
        r = await utools_client.get_dms_init()
        status, messages, conversations, users = await get_dm_init_data_from_response(twttr_client, account, r)        

        if not status:
            add_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DM", account.screen_name, account.color, "error", worker_name)
            return False, None, [], [], []
        maximal_entry = await get_maximal_entry_id(conversations)
        return True, maximal_entry, messages, conversations, users
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DM: {e}", account.screen_name, account.color, "error", worker_name)
        await check_automated(e, account)
        await check_banned(e, account)
        return False, None, [], [], []
    

async def get_dms(utools_client:uToolsAPIClient, twttr_client:TwttrAPIClient, account:Account, max_id:int=None, worker_name:str=None):
 #   try:
        if not max_id:
            return None, [], [], []
        add_message(f"–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤...", account.screen_name, account.color, "log", worker_name)
        r = await utools_client.get_dms_list(max_id)
        
        status, min_entry_id, messages, conversations, users = await get_dm_list_data_from_response(twttr_client, account, r, worker_name)

        if not status:
            add_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ DM", account.screen_name, account.color, "error", worker_name)
            return None, [], [], []
        
        messages = await get_sorted_messages(messages)
        conversations = await get_sorted_conversations(account, messages, conversations, worker_name)
        
        return min_entry_id, messages, conversations, users
 #   except Exception as e:
  #      add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ DM: {e}", account.screen_name, account.color, "error", worker_name)
   #     await check_automated(e, account)
    #    await check_banned(e, account)
     #   return None, [], [], []
    

async def retweet(twttr_client:TwttrAPIClient, account:Account, tweet_id:int):
    try:
        r = await twttr_client.retweet_tweet(tweet_id)
        add_message(f"–†–µ—Ç–≤–∏—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!", account.screen_name, account.color, "success")
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ç–≤–∏—Ç–µ: {e}", account.screen_name, account.color, "error")
        await check_automated(e, account)
        await check_banned(e, account)


async def unretweet(twttr_client:TwttrAPIClient, account:Account, tweet_id:int):
    try:
        r = await twttr_client.unretweet_tweet(tweet_id)
        add_message(f"–†–µ—Ç–≤–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!", account.screen_name, account.color, "success")
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ—Ç–≤–∏—Ç–∞: {e}", account.screen_name, account.color, "error")
        await check_automated(e, account)
        await check_banned(e, account)


async def tweet_info(twttr_client:TwttrAPIClient, account:Account, tweet_id:int, worker_name:str=None):
    try:
        r = await twttr_client.get_tweet_info(tweet_id)
        tw = await get_tweet_data_from_response(r)
        return tw

    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–≤–∏—Ç–µ: {e}", account.screen_name, account.color, "error", worker_name)
        await check_automated(e, account)
        await check_banned(e, account)


async def ban(twttr_client:TwttrAPIClient, account:Account, user_id:int):
    try:
        add_message("–ë–ª–æ–∫–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", account.screen_name, account.color, "error")
        await twttr_client.block_user(user_id)
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", account.screen_name, account.color, "error")
        await check_automated(e, account)
        await check_banned(e, account)


async def get_reposted_timeline(twttr_client:TwttrAPIClient, account:Account, tweet_id:int, cursor:str=None, worker_name:str=None):
    try:
        r = await twttr_client.reposted_timeline(tweet_id, cursor)
        return await get_reposted_timeline_data_from_response(twttr_client, account, r, worker_name)
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ç–≤–∏—Ç–Ω—É–≤—à–∏—Ö: {e}", account.screen_name, account.color, "error", worker_name)
        await check_automated(e, account)
        await check_banned(e, account)


async def check_if_messages_in_conversation(twttr_client:TwttrAPIClient, account:Account, user_id:int=None, worker_name:str=None):
    try:
        r = await twttr_client.get_dm_conversation(user_id)
        return await check_if_messages_in_conversation_from_response(r)
    except Exception as e:
        add_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–æ–≥–∞: {e}", account.screen_name, account.color, "error", worker_name)
        await check_automated(e, account)
        await check_banned(e, account)